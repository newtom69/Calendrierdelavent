@using AdventCalendar.ViewModels
@model CalendarViewModel
@{
    ViewBag.Title = "Index";
    int dayNumber = DateTime.Today.Day;
    const string BoxPreffix = "box";
    const string PicturePreffix = "pict";

}

@if (Model != null)
{
    <h1>Calendrier de l'Avent pour @Model.Calendar.DisplayName</h1>
    <div class="Calendar">
        @for (int i = 1; i <= Model.GenericsPicturesNames.Count; i++)
        {
            string currentBox = BoxPreffix + i;
            string currentPicture = PicturePreffix + i;
            <div class="BoxAndPicture">
                <img id="@currentBox" class="box" src="@Model.GenericsPicturesNames[i]" alt="@(i)" onmouseover="ShowPicture_HideBox(@currentPicture, @currentBox);"/>
                @if (Model.PicturesNames.ContainsKey(i))
                {
                    <img id="@currentPicture" class="picture" src="@Model.PicturesNames[i]" alt="@(i)" onclick="Popup_ShowPictures_HideBox(this, @currentBox);"  />
                }
                else
                {
                    <img class="hover" src="@Model.GenericsPicturesNames[i]" alt="@(i)" />
                }
            </div>
        }
    </div>
}

<div id="popupPicture" class="popup" ontouchstart="TouchStart()" ontouchmove="TouchMove()" ontouchend="TouchEnd()" onmousemove="ShowButtonsCursor()">
    <div id="largeImageAndButtons">
        <img id="imagePopup" class="popup-content">
        <div id="caption"></div>
        <div id="previousButton" class="previous"></div>
        <div id="nextButton" class="next"></div>
        <div id="previousArea"></div>
        <div id="nextArea"></div>
        <div id="closeButton" class="close"></div>
        <div id="maxScreenButton" class="screenButton"></div>
        <div id="defaultScreenButton" class="screenButton"></div>
    </div>
</div>

<script>

function Popup_ShowPictures_HideBox(pictureToShowPermanently, boxToHidePermanently) {

    OnMouseOutArea(PreviousButton);
    OnMouseOutArea(NextButton);
    ScheduleHideButtonsCursor();

    var previousPictureId = "@PicturePreffix" + (parseInt(pictureToShowPermanently.id.replace("@PicturePreffix", "")) - 1);
    var nextPictureId = "@PicturePreffix" + (parseInt(pictureToShowPermanently.id.replace("@PicturePreffix", "")) + 1);
    PreviousPicture = document.getElementById(previousPictureId);
    NextPicture = document.getElementById(nextPictureId);

    var previousBoxId = "@BoxPreffix" + (parseInt(boxToHidePermanently.id.replace("@BoxPreffix", "")) - 1);
    var nextBoxId = "@BoxPreffix" + (parseInt(boxToHidePermanently.id.replace("@BoxPreffix", "")) + 1);
    PreviousBox = document.getElementById(previousBoxId);
    NextBox = document.getElementById(nextBoxId);

    if (PreviousPicture != null) {
        PreviousButton.style.display = 'initial';
        PreviousArea.style.display = 'initial';
        PreviousArea.onclick = function () {
            Popup_ShowPictures_HideBox(PreviousPicture, PreviousBox);
        }
        PreviousArea.onmouseover = function () {
            OnMouseInArea(PreviousButton);
        }
        PreviousArea.onmousemove = function () {
            OnMouseInArea(PreviousButton);
        }
        PreviousArea.TouchStart = function () {
            OnMouseInArea(PreviousButton);
        }
        PreviousArea.onmouseout = function () {
            OnMouseOutArea(PreviousButton);
        }
        PreviousArea.TouchEnd = function () {
            OnMouseOutArea(PreviousButton);
        }
    }
    else {
        PreviousButton.style.display = 'none';
        PreviousArea.style.display = 'none';
    }

    if (NextPicture != null) {
        NextButton.style.display = 'initial';
        NextArea.style.display = 'initial';
        NextArea.onclick = function () {
            Popup_ShowPictures_HideBox(NextPicture, NextBox);
        }
        NextArea.onmouseover = function () {
            OnMouseInArea(NextButton);
        }
        NextArea.onmousemove = function () {
            OnMouseInArea(NextButton);
        }
        NextArea.TouchStart = function () {
            OnMouseInArea(NextButton);
        }
        NextArea.onmouseout = function () {
            OnMouseOutArea(NextButton);
        }
        NextArea.TouchEnd = function () {
            OnMouseOutArea(NextButton);
        }
    }
    else {
        NextButton.style.display = 'none';
        NextArea.style.display = 'none';
    }

    Popup.style.display = 'block';
    ImagePopup.src = pictureToShowPermanently.src;
    $('#caption').html(pictureToShowPermanently.alt)
    ShowPicture_HideBox(pictureToShowPermanently, boxToHidePermanently);
}

    function TouchStart() {
        PreviousButton.style.display = 'initial';
        NextButton.style.display = 'initial';
        XBegin = event.touches[0].clientX;
        XDiff = 0;
    }

function TouchMove() {
    XEnd = event.touches[0].clientX;
    XDiff = XEnd - XBegin;
    if (XDiff > 0 && PreviousPicture != null) {
        ImagePopup.style.transform = 'translate(' + XDiff + 'px)';
    }
    else if (XDiff < 0 && NextPicture != null) {
        ImagePopup.style.transform = 'translate(' + XDiff + 'px)';
    }
}

function TouchEnd() {
    if (XDiff > 40 && PreviousPicture != null) {
        ImagePopup.style.display = 'none';
        Popup_ShowPictures_HideBox(PreviousPicture, PreviousBox);
        ImagePopup.style.display = 'initial';
        ImagePopup.style.transform = 'translate(' + XDiff + 'px)';
    }
    else if (XDiff < -40 && NextPicture != null) {
        ImagePopup.style.display = 'none';
        Popup_ShowPictures_HideBox(NextPicture, NextBox);
        ImagePopup.style.display = 'initial';
        ImagePopup.style.transform = 'translate(' + XDiff + 'px)';
    }
    ImagePopup.style.transform = 'translate(0px)';
}


function OnMouseInArea(element) {
    element.style.cursor = 'pointer';
    element.style.backgroundColor = '#808080';
}

function OnMouseOutArea(element) {
    element.style.cursor = 'initial';
    element.style.backgroundColor = 'initial';
}

function HideButtonsCursor() {
    PreviousButton.style.display = 'none';
    NextButton.style.display = 'none';
    CloseButton.style.display = 'none';
    $('#maxScreenButton').hide();
    $('#defaultScreenButton').hide();
    Popup.style.cursor = 'none';
    PreviousArea.style.cursor = 'none';
    NextArea.style.cursor = 'none';
}

function ShowButtonsCursor() {
    Popup.style.cursor = 'initial';
    PreviousArea.style.cursor = 'pointer';
    NextArea.style.cursor = 'pointer';
    CloseButton.style.display = 'initial';
    if (PreviousPicture != null)
        PreviousButton.style.display = 'initial';
    if (NextPicture != null)
        NextButton.style.display = 'initial';
    if (IsMaxScreen)
        $('#defaultScreenButton').show();
    else 
        $('#maxScreenButton').show();
    ScheduleHideButtonsCursor();
}

function ScheduleHideButtonsCursor() {
    clearTimeout(TimeoutHideBoutonsCursor);
    TimeoutHideBoutonsCursor = setTimeout(function () {
        HideButtonsCursor();
    }, 800);
}


</script>